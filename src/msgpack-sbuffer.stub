;;;
;;; msgpacklib.stub
;;;

"
#include <stdio.h>
#include \"msgpacklib.h\"
"

(include "msgpack.types")

;; The following entry is a dummy one.
;; Replace it for your definitions.


(define-cproc msgpack-sbuffer-init
  (sbuf::<msgpack-sbuffer>) ::<void>
  (msgpack_sbuffer_init (-> sbuf h)))

(define-cproc msgpack-sbuffer-destroy
  (sbuf::<msgpack-sbuffer>) ::<void>
  (msgpack_sbuffer_destroy (-> sbuf h)))

(define-cproc msgpack-sbuffer-new () ::<msgpack-sbuffer>
  (let* ([sbuffer::ScmMsgpackSbuffer* (SCM_NEW ScmMsgpackSbuffer)])
    (SCM_SET_CLASS sbuffer SCM_CLASS_MSGPACK_SBUFFER)
    (set! (-> sbuffer h) (cast (msgpack_sbuffer*) (calloc 1 (sizeof msgpack_sbuffer))))
    (Scm_Warn "calloc sbuffer->h %p" (-> sbuffer h))
    (result sbuffer)))

;;; static inline void msgpack_sbuffer_init(msgpack_sbuffer* sbuf)

;; TBD
;; static inline int msgpack_sbuffer_write(void* data, const char* buf, unsigned int len)
(define-cproc msgpack-sbuffer-write
  (data buf len) ::<int>
  (let* ()
    (cond ([SCM_STRINGP buf]
	   )
	  (else (Scm_Warn "string required, but got ~x" buf)))
    ))

;; static inline char* msgpack_sbuffer_release(msgpack_sbuffer* sbuf)
(define-cproc msgpack-sbuffer-release (sbuf::<msgpack-sbuffer>)
  (body <const-cstring>
        (msgpack_sbuffer_release sbuf)))


;; Local variables:
;; mode: scheme
;; end:
